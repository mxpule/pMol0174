 	/*

int pMolGeneSplicer::Is_Donor(const int *B, double *Return_Score)
{
  FILE  * Infile;
  double Score,S1,S2;

  char line[5000];
  int ind,i;
  int T[100];
  double score1,score2,score3;
  QString treefile;

  if(!readtdon && donor_tree)
    {
   
      // read the structure of the donor tree 
      
      //sprintf(treefile,"%s/%s",TRAIN_DIR,DONOR_TREE_FILE);
      treefile = trainingDirectory + "/" + DONOR_TREE_FILE;
      Infile = fopen (treefile.toAscii().data(), "r");
      if  (Infile == NULL)
	{
	  qDebug() << "ERROR:  Unable to open file " << treefile;
	  exit (EXIT_FAILURE);
	}

      tdon = (tree *) malloc(sizeof(tree));
      if (tdon == NULL) {fprintf(stderr,"Memory allocation for tree failure.\n"); abort();}
      fgets(line, 5000, Infile);
      i=strlen(line);
      line[i-1]='\0';
      fclose(Infile);

      readtree(line, tdon, 0);
      readtdon=TRUE;

      saveTree(tdon, "treeDon");
    }

  for(i=0;i<=Stop_PosIn-Start_PosIn;i++)
    T[i]=B[i+Start_PosIn];

  ind=Don(T, &S1, tdon,0);
  if(ind==0) return(0);
  if(donor_tree) {
    Don(T, &S2, tdon,1);
    score1=(S1+S2)/2;
  }
  else {
    score1=S1;
  }

  //  if(score1<=THR_DON) score1=-99;

  for(i=0;i<=Stop_Cod-Start_Cod;i++)
    T[i]=B[i+Start_Cod];

  Is_Cod_NonCod(T,&score2,2);

  //  if(score2<=THR_DON_EX) score2=-99;
  
  for(i=0;i<=Stop_NoCod-Start_NoCod;i++)
    T[i]=B[i+Start_NoCod];

  Is_Cod_NonCod(T,&score3,3);

  //  if(score3<=THR_DON_IN) score3=-99;

  Score=score1+score2+score3;

  *Return_Score=Score;
  
  return Score >= DONOR_THRESHOLD;
	  
      
}

int pMolGeneSplicer::Is_Acceptor(const int *B, double *Return_Score)
{
  FILE  * Infile;
  double Score,S1,S2;

  char line[5000];
  int i,ind;
  int T[100];
  double score1,score2,score3;
  //char treefile[PATH_MAX+1];
  QString treefile;

  if(!readtacc && acceptor_tree)
    {
   
      // read the structure of the acceptor tree 

      //sprintf(treefile,"%s/%s",TRAIN_DIR,ACCEPTOR_TREE_FILE);
      treefile = trainingDirectory + "/" + ACCEPTOR_TREE_FILE;
      Infile = fopen (treefile.toAscii().data(), "r");
      if  (Infile == NULL)
	{
	  qDebug() << "ERROR:  Unable to open file " << treefile;
	  exit (EXIT_FAILURE);
	}

      tacc = (tree *) malloc(sizeof(tree));
      if (tacc == NULL) {fprintf(stderr," Memory allocation for tree failure.\n"); abort();}
      fgets(line, 5000, Infile);
      i=strlen(line);
      line[i-1]='\0';
      fclose(Infile);

      readtree(line, tacc, 0);
      readtacc=TRUE;

      saveTree(tacc, "treeAcc");
    }
   
  for(i=0;i<=Stop_PosEx-Start_PosEx;i++)
    T[i]=B[i+Start_PosEx];

  ind=Acc(T, &S1, tacc,0);
  if(ind==0) return(0);
  if(acceptor_tree) {
    Acc(T, &S2, tacc,1);
    score1=(S1+S2)/2;
  }
  else { score1=S1; }

  for(i=0;i<=Stop_NoCod-Start_NoCod;i++)
    T[i]=B[i+Start_NoCod];

  Is_Cod_NonCod(T,&score2,0);

  for(i=0;i<=Stop_Cod-Start_Cod;i++)
    T[i]=B[i+Start_Cod];

  Is_Cod_NonCod(T,&score3,1);


  Score=score1+score2+score3;

  *Return_Score=Score;
  
  
  return Score >= ACCEPTOR_THRESHOLD;
	  
      
}  
/*


/*
  QFile file("./pMol/testTableOut.pMol");
  if (!file.open(QIODevice::WriteOnly | QIODevice::Text))  return false;
  QTextStream stream(&file);
  saveTable(&stream,"don1.mar", 1, "pMolGeneSplicerDonorTable");
  saveTable(&stream,"don2", 2,   "pMolGeneSplicerDonorTable");
  saveTable(&stream,"don9", 9,   "pMolGeneSplicerDonorTable");
  saveTable(&stream,"don10", 10, "pMolGeneSplicerDonorTable");
  saveTable(&stream,"don15", 15, "pMolGeneSplicerDonorTable");
  saveTable(&stream,"don16", 16, "pMolGeneSplicerDonorTable");
  saveTable(&stream,"don19", 19, "pMolGeneSplicerDonorTable");
  saveTable(&stream,"don20", 20, "pMolGeneSplicerDonorTable");
  saveTable(&stream,"don23", 23, "pMolGeneSplicerDonorTable");
  saveTable(&stream,"don24", 24, "pMolGeneSplicerDonorTable");

  saveTable(&stream,"acc1.mar",  1, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc7",   7, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc8",   8, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc13", 13, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc14", 14, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc19", 19, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc20", 20, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc25", 25, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc26", 26, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc32", 32, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc33", 33, "pMolGeneSplicerAcceptorTable");
  saveTable(&stream,"acc34", 34, "pMolGeneSplicerAcceptorTable");

*/



//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////


/*


void pMolGeneSplicer::saveBranch(tree* branch, QTextStream* stream, const QString &name)
{
  int x;
  XMLsaveOpen(stream, name);
  XMLsave(stream, "val", branch->val);
  XMLsave(stream, "consens", branch->consens);
  XMLsave(stream, "poz", branch->poz);
  XMLsave(stream, "no", branch->no);

  if (branch->left!=NULL)  saveBranch(branch->left,  stream, "pMolGeneSplicerTreeLeft");
  if (branch->right!=NULL) saveBranch(branch->right, stream, "pMolGeneSplicerTreeRight");

  XMLsaveClose(stream, name);
};

bool pMolGeneSplicer::saveTree(tree* t, const QString &filename)
{
  QFile file("./pMol/"+filename+".pMol");
  if (!file.open(QIODevice::WriteOnly | QIODevice::Text))  return false;
  QTextStream stream(&file);
  saveBranch(t, &stream, "pMolGeneSpicerTree");
  file.close();
  return true;
};


bool pMolGeneSplicer::saveTable(QTextStream* stream, const QString &inName, int number, const QString &tableName)
{
  XMLsaveOpen(stream, tableName);
  XMLsave(stream, "number", number);
//
//  }
//  else if (tag=="value")              	XMLdouble(&value, &valueSet, data, error);
//  else if (tag=="polarity")           	XMLnumeric(&polarity, &polaritySet, data, error);
//  else if (tag=="baseNumber")         	XMLnumeric(&baseNumber, &baseNumberSet, data, error);
//  else if (tag=="base")               	XMLnumeric(&base, &baseSet, data, error);
//  else if (tag=="markov")	
//

  int length = 0;

  if (tableName == "pMolGeneSplicerAcceptorTable") length = ACCEPTOR_LEN;
  if (tableName == "pMolGeneSplicerDonorTable") length = DONOR_LEN;

   int  i, j, k, Ct, Sub, no;
  float value;

   QString accname = trainingDirectory + "/" + inName;

          FILE  *Infile = fopen (accname.toAscii().data(), "r");
        if  (Infile == NULL)
            {
             qDebug() << "ERROR:  Unable to open acceptor file " <<  accname;
             exit (EXIT_FAILURE);
            }

        for  (i = MARKOV_DEGREE - 1;  i < length;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               Ct = fscanf (Infile, "%f", & value);
               if  (Ct != 1)
                   {
                    qDebug() << "ERROR reading acceptor file" << accname;
                    exit (EXIT_FAILURE);
                   }
               XMLsaveOpen(stream, "pMolGeneSplicerPositiveTableElement");
               XMLsave(stream, "polarity", 1);
               XMLsave(stream, "baseNumber", i);
               XMLsave(stream, "base", j);
               XMLsave(stream, "markov", k);
               XMLsave(stream, "value", (double) value);
               XMLsaveClose(stream, "pMolGeneSplicerPositiveTableElement");
              }

        for  (i = MARKOV_DEGREE - 1;  i < length;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               Ct = fscanf (Infile, "%f", &value);
               if  (Ct != 1)
                   {
                    qDebug() << "ERROR reading acceptor file" << accname;
                    exit (EXIT_FAILURE);
                   }
               XMLsaveOpen(stream, "pMolGeneSplicerNegativeTableElement");
               XMLsave(stream, "polarity", -1);
               XMLsave(stream, "baseNumber", i);
               XMLsave(stream, "base", j);
               XMLsave(stream, "markov", k);
               XMLsave(stream, "value", (double) value);
               XMLsaveClose(stream, "pMolGeneSplicerNegativeTableElement");
              }

  XMLsaveClose(stream, tableName);
        fclose (Infile);
  return true;
};

*/

/*
//------------------------------------------------------------------------------------
int  pMolGeneSplicer::Don  (const int * S, double * Return_Score, tree *t,int ind)

// Evaluate string  S [0 .. (DONOR_LEN -1)] and
// return  TRUE  or  FALSE  as to whether it is a likely donor
// site.  Also set  Return_Score  to the probability that it is an donor
// site. 
{
   FILE  * Infile;
   static float  Positive_Table [300][DONOR_LEN] [ALPHABET_SIZE] [MARKOV_LEN];
   static float  Negative_Table [300][DONOR_LEN] [ALPHABET_SIZE] [MARKOV_LEN];
   static int Tables_Loaded[300]={};
   double  Positive_Sum, Negative_Sum, Score;
   int no;

#if  RETURN_TRUE_PROB
   double  X, Y;
#endif
   int  i, j, k, Ct, Sub;
QString donname, temp;
   // see which donor file you should use 
//
  //strcpy(TRAIN_DIR,trainingDir..toAscii().data());
 // QString configFilename = trainingDirectory+"/config_file";
  // read config file
  //sprintf(filename,"%s/config_file",TRAIN_DIR);
//  fp = fopen (configFilename.toAscii().data(), "r");


if(ind)
   { no=fileFind(S,t);
     donname=trainingDirectory+"/"+DONOR_FILE_NAME+temp.setNum(no);
    //sprintf(donname,"%s/%s%d",TRAIN_DIR,DONOR_FILE_NAME,no);
   }
else 
{
  //strcpy(donname,TRAIN_DIR);
  //strcat(donname,"/don1.mar");
   donname = trainingDirectory+"/don1.mar";
  no=0;
}

   if  (! Tables_Loaded[no] )
       {

        Infile = fopen (donname.toAscii().data(), "r");
        if  (Infile == NULL)
            {
             qDebug() << "ERROR:  Unable to open donor file " <<  donname;
             exit (EXIT_FAILURE);
            }

        for  (i = MARKOV_DEGREE - 1;  i < DONOR_LEN;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               Ct = fscanf (Infile, "%f", & Positive_Table [no] [i] [j] [k]);
               if  (Ct != 1)
                   {
                    qDebug() << "ERROR reading donor file" << donname;
                    exit (EXIT_FAILURE);
                   }
              }

        for  (i = MARKOV_DEGREE - 1;  i < DONOR_LEN;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               Ct = fscanf (Infile, "%f", & Negative_Table [no] [i] [j] [k]);
               if  (Ct != 1)
                   {
                    qDebug() << "ERROR reading donor file" << DONOR_FILE_NAME;
                    exit (EXIT_FAILURE);
                   }
              }

        fclose (Infile);

        Tables_Loaded [no] = TRUE;
       }


   if  (S [DONOR_SIGNAL_OFFSET] != 2
           || S [DONOR_SIGNAL_OFFSET + 1] != 3)    // GT 
       {
        * Return_Score = LOW_SCORE;
        return  FALSE;
       }

   Sub = 0;
   for  (i = 0;  i < MARKOV_DEGREE;  i ++)
     Sub = ALPHABET_SIZE * Sub + S [i];

   Positive_Sum = Positive_Table [no] [MARKOV_DEGREE - 1] [0] [Sub];
   Negative_Sum = Negative_Table [no] [MARKOV_DEGREE - 1] [0] [Sub];

   for  (i = MARKOV_DEGREE;  i < DONOR_LEN;  i ++)
     {
      j = S [i];
      Positive_Sum += Positive_Table [no] [i] [j] [Sub];
      Negative_Sum += Negative_Table [no] [i] [j] [Sub];
      Sub = ALPHABET_SIZE * (Sub % (MARKOV_LEN / ALPHABET_SIZE)) + j;
     }
 
   Score = Positive_Sum - Negative_Sum;

#if  RETURN_TRUE_PROB
   X = exp (Positive_Sum + LOG_PROB_DONOR);
   Y = exp (Negative_Sum + LOG_PROB_NONDONOR);
   * Return_Score = log (X / (X + Y));
#else
   * Return_Score = Score;
#endif

	if(Score==-99) printf("look one\n");

   return(1);
  }

*/

/*

int  pMolGeneSplicer::Acc  (const int * S, double * Return_Score, tree *t,int ind)

// Evaluate string  S [0 .. (ACCEPTOR_LEN -1)] and
// return  TRUE  or  FALSE  as to whether it is a likely acceptor
// site.  Also set  Return_Score  to the probability that it is an acceptor
// site. 

  {
   FILE  * Infile;
   static float  Positive_Table[300][ACCEPTOR_LEN] [ALPHABET_SIZE] [MARKOV_LEN];
   static float  Negative_Table[300][ACCEPTOR_LEN] [ALPHABET_SIZE] [MARKOV_LEN];
   static int Tables_Loaded[300]={};
   double  Positive_Sum, Negative_Sum, Score;
   QString accname, temp;
#if  RETURN_TRUE_PROB
   double  X, Y;
#endif
   int  i, j, k, Ct, Sub, no;

// see which acceptor you should use 

//
  //strcpy(TRAIN_DIR,trainingDir..toAscii().data());
//  QString configFilename = trainingDirectory+"/config_file";
  // read config file
  //sprintf(filename,"%s/config_file",TRAIN_DIR);
//  fp = fopen (configFilename.toAscii().data(), "r");


if(ind) 
  {
	no=fileFind(S,t);
	//sprintf(accname,"%s/%s%d",TRAIN_DIR,ACCEPTOR_FILE_NAME,no);
       accname = trainingDirectory + "/" + ACCEPTOR_FILE_NAME + temp.setNum(no);

  }
else 
  {
    //strcpy(accname,TRAIN_DIR);
    //strcat(accname,"/acc1.mar");
     accname = trainingDirectory + "/acc1.mar";
    no=0;
  }

   if  (! Tables_Loaded[no])
       {
        Infile = fopen (accname.toAscii().data(), "r");
        if  (Infile == NULL)
            {
             qDebug() << "ERROR:  Unable to open acceptor file " <<  accname;
             exit (EXIT_FAILURE);
            }

        for  (i = MARKOV_DEGREE - 1;  i < ACCEPTOR_LEN;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               Ct = fscanf (Infile, "%f", & Positive_Table [no][i] [j] [k]);
               if  (Ct != 1)
                   {
                    qDebug() << "ERROR reading acceptor file" << accname;
                    exit (EXIT_FAILURE);
                   }
              }

        for  (i = MARKOV_DEGREE - 1;  i < ACCEPTOR_LEN;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               Ct = fscanf (Infile, "%f", & Negative_Table [no][i] [j] [k]);
               if  (Ct != 1)
                   {
                    qDebug() << "ERROR reading acceptor file" << accname;
                    exit (EXIT_FAILURE);
                   }
              }

        fclose (Infile);

        Tables_Loaded[no]  = TRUE;
       }

   if  (S [ACCEPTOR_SIGNAL_OFFSET] != 0
           || S [ACCEPTOR_SIGNAL_OFFSET + 1] != 2)    // AG 
       {
        * Return_Score = LOW_SCORE;
        return  FALSE;
       }

   Sub = 0;
   for  (i = 0;  i < MARKOV_DEGREE;  i ++)
     Sub = ALPHABET_SIZE * Sub + S [i];

   Positive_Sum = Positive_Table [no][MARKOV_DEGREE - 1] [0] [Sub];
   Negative_Sum = Negative_Table [no][MARKOV_DEGREE - 1] [0] [Sub];

   for  (i = MARKOV_DEGREE;  i < ACCEPTOR_LEN;  i ++)
     {
      j = S [i];
      Positive_Sum += Positive_Table [no] [i] [j] [Sub];
      Negative_Sum += Negative_Table [no] [i] [j] [Sub];
      Sub = ALPHABET_SIZE * (Sub % (MARKOV_LEN / ALPHABET_SIZE)) + j;
     }
  


   Score = Positive_Sum - Negative_Sum;

#if  RETURN_TRUE_PROB
   X = exp (Positive_Sum + LOG_PROB_ACCEPTOR);
   Y = exp (Negative_Sum + LOG_PROB_NONACCEPTOR);
   * Return_Score = log (X / (X + Y));
#else
   * Return_Score = Score;
#endif

   return(1);
  }
*/

////////////////////////////////////////////////////////////////////////////////////
/*
int pMolGeneSplicer::fileFind(const int * S, tree *t)
{
	int val, cons, poz;
	val=t->val;

	cons=t->consens;
	if( cons !=-1)
	{ 
		poz=t->poz;
	    if(S[poz]==cons)
	    	val=fileFind(S,t->left);
	    else val=fileFind(S, t->right);
	}

	return(val);
}
*/
void pMolGeneSplicer::lastSaveTable(const QString &filename, const QString &name,   QTextStream * stream)
{ 
  XMLsaveOpen(stream, name);
 float value;
   FILE  * Infile;
   static float  Positive_Table [4][CODING_LEN] [ALPHABET_SIZE] [MARKOV_LEN];
   static float  Negative_Table [4][CODING_LEN] [ALPHABET_SIZE] [MARKOV_LEN];
   static  int  Tables_Loaded[4] = {FALSE,FALSE,FALSE,FALSE};
   double  Positive_Sum, Negative_Sum, Score, Threshold;

   int no, i, k, j, Ct;


       Infile = fopen (filename.toAscii().data(), "r");
        if  (Infile == NULL)
            {
             qDebug() << "ERROR:  Unable to open donor file" << filename;
             exit (EXIT_FAILURE);
            }

        for  (i = MARKOV_DEGREE - 1;  i < CODING_LEN;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               //Ct = fscanf (Infile, "%f", & Positive_Table [no] [i] [j] [k]);
               Ct = fscanf (Infile, "%f", &value);
               if  (Ct != 1)
                   {
                    qDebug() <<"ERROR reading donor file" << filename;
                    exit (EXIT_FAILURE);
                   }

               XMLsaveOpen(stream, "pMolGeneSplicerPositiveTableElement");
               XMLsave(stream, "polarity", 1);
               XMLsave(stream, "baseNumber", i);
               XMLsave(stream, "base", j);
               XMLsave(stream, "markov", k);
               XMLsave(stream, "value", (double) value);
               XMLsaveClose(stream, "pMolGeneSplicerPositiveTableElement");
              }

        for  (i = MARKOV_DEGREE - 1;  i < CODING_LEN;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               //Ct = fscanf (Infile, "%f", & Negative_Table [no] [i] [j] [k]);
               Ct = fscanf (Infile, "%f", &value);
               if  (Ct != 1)
                   {
                    qDebug() << "ERROR reading donor file" << filename;
                    exit (EXIT_FAILURE);
                   }

          XMLsaveOpen(stream, "pMolGeneSplicerNegativeTableElement");
               XMLsave(stream, "polarity", -1);
               XMLsave(stream, "baseNumber", i);
               XMLsave(stream, "base", j);
               XMLsave(stream, "markov", k);
               XMLsave(stream, "value", (double) value);
               XMLsaveClose(stream, "pMolGeneSplicerNegativeTableElement");
              }

        fclose (Infile);

  XMLsaveClose(stream, name);


};


/*
int  pMolGeneSplicer::Is_Cod_NonCod  (const int * S, double * Return_Score, int ind)

// Evaluate string  S [0 .. (CODING_LEN -1)] and
// return  TRUE  or  FALSE  as to whether it is a likely donor
// site.  Also set  Return_Score  to the probability that it is an donor
// site. 

  {
   FILE  * Infile;
   static float  Positive_Table [4][CODING_LEN] [ALPHABET_SIZE] [MARKOV_LEN];
   static float  Negative_Table [4][CODING_LEN] [ALPHABET_SIZE] [MARKOV_LEN];
   static  int  Tables_Loaded[4] = {FALSE,FALSE,FALSE,FALSE};
   double  Positive_Sum, Negative_Sum, Score, Threshold;
   QString filename;
   int no;


#if  RETURN_TRUE_PROB
   double  X, Y;
#endif
   int  i, j, k, Ct, Sub;

   no=ind;

  //strcpy(TRAIN_DIR,trainingDir..toAscii().data());
//  QString configFilename = trainingDirectory+"/config_file";
  // read config file
  //sprintf(filename,"%s/config_file",TRAIN_DIR);
 // fp = fopen (configFilename.toAscii().data(), "r");


   switch (no) {
   case 0: // case of exon in acceptor
     filename = trainingDirectory+"/score_ex.acc";
     break;
   case 1: // case of intron in acceptor
     filename = trainingDirectory+"/score_in.acc";
     break;
   case 2: // case of exon in donor
     filename = trainingDirectory+"/score_ex.don";
     break;
   case 3: // case of intron in donor
     filename = trainingDirectory+"/score_in.don";
     break;
   }

   if  (! Tables_Loaded[no] )
       {
        Infile = fopen (filename.toAscii().data(), "r");
        if  (Infile == NULL)
            {
             qDebug() << "ERROR:  Unable to open donor file" << filename;
             exit (EXIT_FAILURE);
            }

        for  (i = MARKOV_DEGREE - 1;  i < CODING_LEN;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               Ct = fscanf (Infile, "%f", & Positive_Table [no] [i] [j] [k]);
               if  (Ct != 1)
                   {
                    qDebug() <<"ERROR reading donor file" << filename;
                    exit (EXIT_FAILURE);
                   }
              }

        for  (i = MARKOV_DEGREE - 1;  i < CODING_LEN;  i ++)
          for  (k = 0;  k < MARKOV_LEN;  k ++)
            for  (j = 0;  j < ALPHABET_SIZE;  j ++)
              {
               Ct = fscanf (Infile, "%f", & Negative_Table [no] [i] [j] [k]);
               if  (Ct != 1)
                   {
                    qDebug() << "ERROR reading donor file" << filename;
                    exit (EXIT_FAILURE);
                   }
              }

        fclose (Infile);

        Tables_Loaded [no] = TRUE;
       }

   Sub = 0;
   for  (i = 0;  i < MARKOV_DEGREE;  i ++)
     Sub = ALPHABET_SIZE * Sub + S [i];

   Positive_Sum = Positive_Table [no] [MARKOV_DEGREE - 1] [0] [Sub];
   Negative_Sum = Negative_Table [no] [MARKOV_DEGREE - 1] [0] [Sub];

   for  (i = MARKOV_DEGREE;  i < CODING_LEN;  i ++)
     {
      j = S [i];

     Positive_Sum += spliceAcceptorTables[no]->getPositiveTableValue(i,j,Sub,&okp);
     Negative_Sum += spliceAcceptorTables[no]->getNegativeTableValue(i,j,Sub,&okn);
      Positive_Sum += Positive_Table [no] [i] [j] [Sub];
      Negative_Sum += Negative_Table [no] [i] [j] [Sub];
      Sub = ALPHABET_SIZE * (Sub % (MARKOV_LEN / ALPHABET_SIZE)) + j;
     }
 


   Score = Positive_Sum - Negative_Sum;

#if  RETURN_TRUE_PROB
   X = exp (Positive_Sum + LOG_PROB_DONOR);
   Y = exp (Negative_Sum + LOG_PROB_NONDONOR);
   * Return_Score = log (X / (X + Y));
#else
   * Return_Score = Score;
#endif

   return (1);
  }
*/
